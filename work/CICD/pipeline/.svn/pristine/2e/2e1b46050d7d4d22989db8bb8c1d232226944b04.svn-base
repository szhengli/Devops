pipeline {
    agent any	
    stages {
	       stage('PreBuild') {
				steps {
				    script {
                        def get_serviceName = sh(script: '''
                                          echo $SVN_URL_2 |  awk -F '[/]+' '{ print  $NF }'
                                          ''' , returnStdout: true).trim()
                        env.serviceName = get_serviceName
                        def get_ENV = sh(script: '''
                                          echo $JOB_NAME | cut -d- -f1
                                          ''' , returnStdout: true).trim()
                        env.ENV = get_ENV
						def get_MVNENV = sh(script: '''
                                          echo $JOB_NAME | cut -d- -f1 |sed 's/v5//'
                                          ''' , returnStdout: true).trim()
                        env.MVNENV = get_MVNENV
                        def get_CONTEXT = sh(script: '''
                                          echo $JOB_NAME | cut -d- -f2
                                          ''' , returnStdout: true).trim()
                        env.CONTEXT = get_CONTEXT
						def get_BRANCH = sh(script: '''
                                          echo $SVN_URL_2 |  awk -F '[/]+' '{ print  $(NF-1) }'
                                          ''' , returnStdout: true).trim()
                        env.BRANCH = get_BRANCH
                     }
					sh '''
				    standby_SendMsg.sh ${BRANCH} ${serviceName} "服务开始发布了，请关注" "备用环境开始发布通知" $SVN_URL_2
				    '''
				}
		   }
           stage('Build') {
                steps {
                    sh '''
                    id && pwd
					curl -s -d "kaenv=${MVNENV}&syscode=${serviceName}" http://f.cnzhonglunnet.com/zl.fp.fpv5.keyAccount.getAppConfig.customize.v5/1.0.0/action > ${serviceName}-pom/vars/vars.${MVNENV}.properties
					mvn -f ${serviceName}-pom/pom.xml clean install package -P ${MVNENV} -Dmaven.test.skip=true
                    '''
                   }
				post {
					failure {
						sh '''
						standby_SendMsg.sh ${BRANCH} ${serviceName} "服务构建失败，请开发人员检查" "备用环境构建失败通知"
						'''
					}
			   }
            }
            
            stage ('Make image'){
                steps {
                     sh '''
                         #env
                         make_image_standby.sh
                         '''
                }
				post {
					failure {
						sh '''
						standby_SendMsg.sh ${BRANCH} ${serviceName} "服务构建镜像失败，请运维人员检查" "备用环境构建镜像失败通知"
						'''
					}
			   }
            }
			
            stage ('Deploy'){
			    steps {
                     sh '''
                         #env
						 if [[ $ENV =~ prod|prodv5 ]]; then
                            [[ -n $(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) || paras="2 2"
                         else
                            [[ -n $(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) || paras="1 1"
                         fi
                         deploy_standby.sh  ${paras}
                         '''
					 }
				post {
					failure {
						sh '''
						standby_SendMsg.sh ${BRANCH} ${serviceName} "服务部署失败，请运维人员检查" "备用环境部署失败通知"
						'''
					}
			   }
            }

            stage ('Check'){
                steps {
                     sh '''
                         if [[ $ENV =~ prod|prodv5 ]]; then
                            [[ -n $(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) || paras="2 2"
                         else
                            [[ -n $(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""standby""_""$serviceName"_Replics) || paras="1 1"
                         fi
                         check_health_standby.sh   ${paras}
                         '''
                  }
				post {
				    success {
					  	sh '''
						standby_SendMsg.sh ${BRANCH} ${serviceName} "服务发布成功" "备用环境发布完成通知"
						'''
					}
					failure {
						sh '''
						standby_SendMsg.sh ${BRANCH} ${serviceName} "服务发布失败，请相关开发人员检查" "备用环境发布失败通知"
						'''
					}
			   }
            }

            stage ('Scaledown'){
                steps {
                     sh '''
                         #env
                         scaledown_standby.sh
                         '''
                }
            }
    }
    
    post {
           always {
                             cleanWs()
                    }
       }


}