pipeline {
    agent any
    options {
      ansiColor('xterm')
    }
    stages {
           stage('Build') {
                steps {
                     script {
                        def get_serviceName = sh(script: '''
                                          echo $SVN_URL_2 |  awk -F '[/]+' '{ print  $NF }'
                                          ''' , returnStdout: true).trim()
                        env.serviceName = get_serviceName
                        def get_ENV = sh(script: '''
                                          echo $JOB_NAME | cut -d- -f1
                                          ''' , returnStdout: true).trim()
                        env.ENV = get_ENV
                        def get_MVNENV = sh(script: '''
                                          echo $JOB_NAME | cut -d- -f1 | sed 's/v5//'
                                          ''' , returnStdout: true).trim()
                        env.MVNENV = get_MVNENV
						def get_BRANCH = sh(script: '''
										  if echo $SVN_URL_2 | grep "trunk" -q;then
											  echo $SVN_URL_2 |  awk -F '[/]+' '{ print  $(NF-2) }'
										  else
										      echo $SVN_URL_2 |  awk -F '[/]+' '{ print  $(NF-1) }' 
										  fi
                                          ''' , returnStdout: true).trim()
                        env.BRANCH = get_BRANCH
						
						// 显示当前已构建使用分支
						// currentBuild.rawBuild.project.description = '当前已构建使用分支: ' + get_BRANCH
                     }

                    sh '''
                    id && pwd
                    mvn -f ${serviceName}-pom/pom.xml clean install package -P ${MVNENV} -Dmaven.test.skip=true
                    '''
                   }
			    post {
					failure {
						sh '''
						dingding.py ${JOB_NAME} ${serviceName} ${ENV} "服务构建失败"
						'''
					}
			   }
            }
            
            stage ('Make image'){
                  steps {
                     sh '''
                        make_image_hw.sh
                        '''
                  }
            }
			
            stage ('Deploy'){
			       steps {
                     sh '''
                        [[ -n $(eval echo '$'"$ENV""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""$serviceName"_Replics) || paras="1 1"
                        deploy_hw.sh  ${paras}
                        '''
					 }
            }

            stage ('Check'){
                  steps {

                    sh '''
                        [[ -n $(eval echo '$'"$ENV""_""$serviceName"_Replics) ]] && paras=$(eval echo '$'"$ENV""_""$serviceName"_Replics) || paras="1 1"
                        check_health_hw.sh   ${paras}
                    '''
					script{
						// 显示当前运行的分支
						currentBuild.rawBuild.project.description = '当前运行分支: ' + "${env.BRANCH}"
					}
                  }
            }
    }
    
    post {
        always {
            cleanWs()
        }
    }

}