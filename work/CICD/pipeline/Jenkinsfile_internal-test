pipeline {
    agent any
    options {
      ansiColor('xterm')
    }

   environment {
        serviceName = """${sh( returnStdout: true,
                             script: '''
                                    echo  $SVN_URL |  awk -F '[/]+' '{ printf  $NF }'
                             '''
                         )}"""
        ENV = """${sh( returnStdout: true,
                             script: '''
                                    echo $JOB_NAME | cut -d- -f1 | xargs echo -n
                             '''
                         )}"""
        MVNENV = """${sh(
                             returnStdout: true,
                             script: '''
                                    echo $JOB_NAME | cut -d- -f1 | tr -d "v5" | xargs echo -n
                             '''
                         )}"""
        CONTEXT = """${sh(
                             returnStdout: true,
                             script: '''
                                   echo $JOB_NAME | cut -d- -f2 | xargs echo -n
                             '''
                         )}"""


        BRANCH = """${sh(
                             returnStdout: true,
                             script: '''
                                    if echo $SVN_URL | grep "trunk" -q;then
                                          echo $SVN_URL |  awk -F '[/]+' '{ printf  $(NF-2) }'
                                    else
                                          echo $SVN_URL |  awk -F '[/]+' '{ printf  $(NF-1) }'
                                    fi
                             '''
                         )}"""
        jobName = """${sh(
                             returnStdout: true,
                             script: '''
                                    echo $JOB_NAME | cut -d- -f3 | xargs echo -n
                             '''
                         )}"""
        paras = """${sh(
                             returnStdout: true,
                             script: '''
                                     if [[ $ENV == pre ]]; then
                                           [[ -n $(eval echo '$'"$ENV""_""$serviceName"_Replics) ]] && echo -n $(eval echo '$'"$ENV""_""$serviceName"_Replics)  || echo -n "2 2"
                                        else
                                           [[ -n $(eval echo '$'"$ENV""_""$serviceName"_Replics) ]] && echo -n $(eval echo '$'"$ENV""_""$serviceName"_Replics) || echo -n "1 1"
                                        fi
                             '''
                         )}"""

    }

    stages {
           stage('Build') {
                steps {

                    sh '''
					env
                    id && pwd
					if [[ $jobName == $serviceName ]];then
						mvn -f ${serviceName}-pom/pom.xml clean install package -P ${MVNENV} -Dmaven.test.skip=true
					else
					    echo "SVN分支路径有误,请按照对应环境填写对应的SVN路径!!!" && exit 1
					fi
                    '''
                   }
			    post {
					failure {
						sh '''
						dingding.py ${JOB_NAME} ${serviceName} ${ENV} "服务构建失败"
						'''
					}
			   }
            }
            
            stage ('Make image'){
                  steps {
                     sh '''
                         make_image.sh
                         '''
                  }
            }
			
            stage ('Deploy'){
			       steps {
                     sh '''
                         deploy.sh  ${paras}
                         '''
					 }
            }

            stage ('Check'){
                  steps {

                    sh '''
                        check_health.sh   ${paras}
                    '''
					script{
						// 显示当前运行的分支
						currentBuild.rawBuild.project.description = '当前运行分支: ' + "${env.BRANCH}"
					}
                  }
            }
    }
    
    post {
        always {
            cleanWs()
        }
    }

}