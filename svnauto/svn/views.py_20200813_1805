from django.shortcuts import render
from django.http import HttpResponse
from subprocess import getstatusoutput
from django.views.decorators.csrf import csrf_exempt
import requests
import re,logging
logger = logging.getLogger("django")

##项目分支专用群dingding机器人URL
dingding = "https://oapi.dingtalk.com/robot/send?access_token=31c90bb3bf6a6f28578fecad607bdfb0080f7df2aa6a09e15f1ecfa0ea18a3ec"

def notify(msg):
    #url = 'https://oapi.dingtalk.com/robot/send?access_token=b69e39a14e141f471829ca4ad8543f38464ab2fec4f617f66d84c19c2a44ea6a'

    data = {"msgtype": "text","text": {"content": msg}}
    status = requests.post(dingding, json=data)
   # status = requests.post(url, json=data)
    print(status.text)


# Create your views here.
@csrf_exempt
def branchRo(request):
    if request.method == 'POST':
        svnAddresses = request.POST.get('svnAddresses')
        svnurls = re.split('[ \n,、，]+', svnAddresses.strip())
        report = ""
        for svnurl in svnurls:
            cmd = 'bash /data/script/branchRo.sh ' + svnurl
            print("封板请求: "+ cmd)
            logger.info("封板请求: "+ cmd)
            status, msg = getstatusoutput(cmd)
            if status == 0:
                msg = "svn分支:  " + svnurl + " 封版成功"
                report = report + msg + "\n"
            else:
                msg = "svn分支: " + svnurl + "由于" + msg + " 封版失败"
                report = report + msg + "\n"
            logger.info(msg)
            notify(msg)
        return HttpResponse(report)
    else:
        return HttpResponse("This method only support POST")
@csrf_exempt
def branchRw(request):
    if request.method == 'POST':
        svnAddresses = request.POST.get('svnAddresses')
        svnurls = re.split('[ \n,、，]+', svnAddresses.strip())
        report = ""
        for svnurl in svnurls:
            cmd = 'bash /data/script/branchRw.sh ' + svnurl
            print(cmd)
            logger.info("解板请求: "+ cmd)
            status, msg = getstatusoutput(cmd)
            if status == 0:
                msg = "svn分支: " + svnurl + "  解版成功"

                report = report + msg + "\n"
            else:
                msg = "svn分支: " + svnurl + "由于: " + msg + " 解版失败"
                report = report + msg + "\n"
            logger.info(msg)
            notify(msg)
        return HttpResponse(report)
    else:
        return HttpResponse("This method only support POST")

def checkClass(project):
    parent = "http://svn.cnzhonglunnet.com/svn/zlnet/code/project/trunk/"
    auth = " --username svnadmin  --password Zhonglun@2020 | tr -d / "
    catalogs = ["Java", "MT", "TWeb", "MWeb", "PCWeb", "Public"]
    for cat in catalogs:
        projects = getstatusoutput("svn list " + parent + cat + auth)[1].split('\n')
        if project in projects :
            return cat
    return "newProject"





@csrf_exempt
def branchCreate(request):
    if request.method == 'POST':
        releaseDate = request.POST.get('releaseDate')
        year, month, date = releaseDate.split("-")
        includedSystems = request.POST.get('includedSystems')
        projects = re.split('[ \n,、，]+', includedSystems.strip())
        report = ""
        for project in projects:
            cmd = "bash   /data/script/branchCreate.sh %s %s %s %s %s" % (year,month,date,project,checkClass(project))
            print(cmd)
            logger.info("分支新建: " + cmd)
            status, msg = getstatusoutput(cmd)
            if status == 0:
                msg = msg
            else:
                msg = releaseDate + project + " svn分支创建失败"
                report = report + msg + "\n"
            logger.info(msg)
            notify(msg)

        return HttpResponse(report)
    else:
        return HttpResponse("This method only support POST")



@csrf_exempt
def branchAdjust(request):
    if request.method == 'POST':
        report = ""
        comment = request.POST.get('comment')
        branch= request.POST.get('branch')
        year = branch[0:4]; month = branch[4:6]; date = branch[6:8]
        addedSystems = request.POST.get('addedSystems')
        if addedSystems and addedSystems != "null":
            addedProjects = re.split('[ \n,、，]+', addedSystems.strip())
            for project in addedProjects:
                cmd = "bash /data/script/branchCreate.sh %s %s %s %s %s" % (
                       year, month, date, project, checkClass(project))
                print(cmd)
                logger.info("分支调整: " + cmd)
                status, msg = getstatusoutput(cmd)
                if status == 0:
                    msg = msg
                else:
                    msg = branch + project + "分支创建失败"
                    report = report + msg + "\n"
                logger.info(msg)
                notify(msg)
        deletedSystems = request.POST.get('deletedSystems')
        if deletedSystems and deletedSystems != "null":
            deletedProjects = re.split('[ \n,、，]+', deletedSystems.strip())
            for project in deletedProjects:
                cmd = "bash /data/script/branchDel.sh %s %s %s %s %s" % (
                    year, month, date, project, comment)
                print(cmd)
                logger.info("分支删除: " + cmd)
                status, msg = getstatusoutput(cmd)
                if status == 0:
                    msg = "svn分支: " + branch + "/" + project + "删除成功!"
                else:
                    msg = "svn分支: " + branch + "/" + project + "删除失败!"
                logger.info(msg)
                notify(msg)
        return HttpResponse(msg)
    else:
        return HttpResponse("This method only support POST")





