// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/shop.proto

package shop

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Shop service

func NewShopEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Shop service

type ShopService interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...client.CallOption) (*BuyResponse, error)
}

type shopService struct {
	c    client.Client
	name string
}

func NewShopService(name string, c client.Client) ShopService {
	return &shopService{
		c:    c,
		name: name,
	}
}

func (c *shopService) Buy(ctx context.Context, in *BuyRequest, opts ...client.CallOption) (*BuyResponse, error) {
	req := c.c.NewRequest(c.name, "Shop.Buy", in)
	out := new(BuyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shop service

type ShopHandler interface {
	Buy(context.Context, *BuyRequest, *BuyResponse) error
}

func RegisterShopHandler(s server.Server, hdlr ShopHandler, opts ...server.HandlerOption) error {
	type shop interface {
		Buy(ctx context.Context, in *BuyRequest, out *BuyResponse) error
	}
	type Shop struct {
		shop
	}
	h := &shopHandler{hdlr}
	return s.Handle(s.NewHandler(&Shop{h}, opts...))
}

type shopHandler struct {
	ShopHandler
}

func (h *shopHandler) Buy(ctx context.Context, in *BuyRequest, out *BuyResponse) error {
	return h.ShopHandler.Buy(ctx, in, out)
}

// Api Endpoints for Helloworld service

func NewHelloworldEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Helloworld service

type HelloworldService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Echo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type helloworldService struct {
	c    client.Client
	name string
}

func NewHelloworldService(name string, c client.Client) HelloworldService {
	return &helloworldService{
		c:    c,
		name: name,
	}
}

func (c *helloworldService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Helloworld.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldService) Echo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Helloworld.Echo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Helloworld service

type HelloworldHandler interface {
	Call(context.Context, *Request, *Response) error
	Echo(context.Context, *Request, *Response) error
}

func RegisterHelloworldHandler(s server.Server, hdlr HelloworldHandler, opts ...server.HandlerOption) error {
	type helloworld interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Echo(ctx context.Context, in *Request, out *Response) error
	}
	type Helloworld struct {
		helloworld
	}
	h := &helloworldHandler{hdlr}
	return s.Handle(s.NewHandler(&Helloworld{h}, opts...))
}

type helloworldHandler struct {
	HelloworldHandler
}

func (h *helloworldHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.HelloworldHandler.Call(ctx, in, out)
}

func (h *helloworldHandler) Echo(ctx context.Context, in *Request, out *Response) error {
	return h.HelloworldHandler.Echo(ctx, in, out)
}
